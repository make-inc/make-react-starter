/**
 * Production Express Server with Server-Side Rendering (SSR)
 * 
 * This file configures the production Express server that serves the built application
 * with server-side rendering capabilities. It handles static file serving, API routes,
 * and renders React components on the server before sending HTML to the client.
 * 
 * Features:
 * - Server-side rendering of React components
 * - Static file serving for production builds
 * - API route handling
 * - Error handling for SSR failures
 * 
 * @author Express SSR App
 * @version 1.0.0
 */

import express from 'express'
import path from 'path'
import fs from 'fs'
import { render } from './render'
import apiRoutes from './routes/api'

// Initialize Express application
const app = express()
const PORT = process.env.PORT || 3000

/**
 * Configure Express middleware
 * - JSON parsing for API requests
 * - URL-encoded form data parsing
 */
app.use(express.json())
app.use(express.urlencoded({ extended: true }))

/**
 * Serve static assets from the built client directory
 * This includes CSS, JavaScript, images, and other static files
 * generated by the Vite build process
 */
app.use(express.static(path.join(__dirname, '../dist/client')))

/**
 * Mount API routes under /api prefix
 * All API endpoints will be available at /api/*
 */
app.use('/api', apiRoutes)

/**
 * Server-Side Rendering (SSR) handler for all routes
 * 
 * This catch-all route handler performs the following:
 * 1. Reads the built HTML template from Vite
 * 2. Renders the React app to HTML string
 * 3. Injects the rendered HTML into the template
 * 4. Sends the complete HTML to the client
 * 
 * The client will then hydrate the server-rendered HTML,
 * making it interactive without a full page reload.
 */
app.get('*', async (req, res) => {
  try {
    // Read the built HTML template generated by Vite
    const indexPath = path.join(__dirname, '../dist/client/index.html')
    let template = fs.readFileSync(indexPath, 'utf-8')
    
    // Render the React app to HTML string using server-side rendering with routing
    const appHtml = render(req.url)
    
    // Inject the rendered app HTML into the template
    // This replaces the empty <div id="root"></div> with the actual content
    const html = template.replace('<div id="root"></div>', `<div id="root">${appHtml}</div>`)
    
    // Send the complete HTML response to the client
    res.status(200).set({ 'Content-Type': 'text/html' }).end(html)
  } catch (e) {
    // Log SSR errors for debugging
    console.error('SSR Error:', e)
    
    // Send generic error response to prevent exposing internal details
    res.status(500).end('Internal Server Error')
  }
})

/**
 * Start the production server
 * Listens on the specified port and logs startup information
 */
app.listen(PORT, () => {
  console.log(`🚀 Production server running on http://localhost:${PORT}`)
  console.log(`📁 Serving static files from: ${path.join(__dirname, '../dist/client')}`)
  console.log(`🔗 API routes available at: http://localhost:${PORT}/api`)
})

export default app